// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hash      String
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id                String          @id @default(cuid())
  firstname         String
  lastname          String
  email             String          @unique
  emailVerified     DateTime?
  username          String          @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  image             String?
  accounts          Account[]
  deletedMessages   Message[]       @relation("deletedByUsers")
  chats             Chat[]
  messages          Message[]
  Profile           Profile?
  adminInGroupChats GroupChatInfo[]
  readMessages      MessageRead[]
}

model Profile {
  profileId String @id @unique
  user      User   @relation(fields: [profileId], references: [id])
  about     String
}

enum ChatType {
  Single
  Group
}

model MessageRead {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @id
  readAt    DateTime @default(now())
  Message   Message  @relation(fields: [messageId], references: [id])
  messageId String
}

model Message {
  id       String @id @default(cuid())
  content  String
  sender   User   @relation(fields: [senderId], references: [id])
  senderId String

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  sent          Boolean       @default(true)
  read          MessageRead[]
  deletedForAll Boolean       @default(false)

  Chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  deletedByUsers User[] @relation("deletedByUsers")
}

model Chat {
  id            String         @id @default(cuid())
  messages      Message[]
  type          ChatType
  users         User[]
  GroupChatInfo GroupChatInfo?
}

model GroupChatInfo {
  chat        Chat    @relation(fields: [chatId], references: [id])
  chatId      String  @id
  image       String?
  description String?
  admins      User[]
  name        String
}
